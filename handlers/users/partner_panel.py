from aiogram import types, F
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from aiogram.types import CallbackQuery, ReplyKeyboardRemove

from data.config import ADMINS
from keyboards.default import create_invest_button, create_contact_button, create_partners_buttons, create_menu_buttons
from keyboards.inline import create_back_button
from loader import dp, db, bot


@dp.message(lambda msg: msg.text in ["üßæ Hamkorlar uchun bo'lim", "üßæ –†–∞–∑–¥–µ–ª –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"])
async def send_partner_info(msg: types.Message, state: FSMContext):
    lang = 'uz' if msg.text == "üßæ Hamkorlar uchun bo'lim" else 'ru'
    TEXTS = {
        'uz': "Pastdagi kerakli tugmachani bo'sing:",
        'ru': "–ù–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    }
    await msg.answer(TEXTS[lang], reply_markup=await create_partners_buttons(lang))


@dp.message(lambda msg: msg.text in ["üîô Qaytish", "üîô –ù–∞–∑–∞–¥"])
async def send_partner_info(msg: types.Message, state: FSMContext):
    lang = 'uz' if msg.text == "üîô Qaytish" else 'ru'
    TEXTS = {
        'uz': "Asosiy menyuga qaytdingiz:",
        'ru': "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: "
    }
    await msg.answer(TEXTS[lang], reply_markup=await create_menu_buttons(lang))


@dp.message(lambda msg: msg.text in ["üìÑ Hamkorlik imkoniyatlari", "üìÑ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞"])
async def send_partner_info(msg: types.Message, state: FSMContext):
    lang = 'uz' if msg.text == "üìÑ Hamkorlik imkoniyatlari" else 'ru'
    get_partner_info = await db.get_partners_info(lang)
    if get_partner_info:
        TEXTS = {
            'uz': {
                'partner_info': f"Hamkorlik imkoniyatlari haqida ma'lumot: \n\n{get_partner_info[0]}\n"
                                f"{get_partner_info[1]}\n{get_partner_info[2]}\n{get_partner_info[3]}"
            },
            'ru': {
                'partner_info': f"–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞: \n\n{get_partner_info[0]}\n"
                                f"{get_partner_info[1]}\n{get_partner_info[2]}\n{get_partner_info[3]}\n"
            },
        }
        await msg.answer(TEXTS[lang])
    else:
        TEXTS = {
            'uz': "Hamkorlik imkoniyatlari haqida ma'lumotlar topilmadi",
            'ru': "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞"
        }
        await msg.answer(TEXTS[lang])


@dp.message(lambda msg: msg.text in ["üìù Hamkorlik uchun ariza yuborish", "üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ"])
async def send_partner_info(msg: types.Message, state: FSMContext):
    lang = 'uz' if msg.text == "üìù Hamkorlik uchun ariza yuborish" else 'ru'
    TEXTS = {
        'uz': "Ism-Familiyangizni kiriting:",
        'ru': "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:"
    }
    await msg.answer(TEXTS[lang], reply_markup=ReplyKeyboardRemove())
    await state.update_data({'lang': lang})
    await state.set_state('get_partner_fullname')


@dp.message(StateFilter('get_partner_fullname'))
async def get_partner_fullname(msg: types.Message, state: FSMContext):
    lang = await state.get_data()
    await state.update_data(fullname=msg.text)
    TEXTS = {
        'uz': "Telefon raqamingizni pastki tugmacha orqali yuboring:",
        'ru': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    }
    await msg.answer(TEXTS[lang['lang']], reply_markup=await create_contact_button(lang['lang']))
    await state.set_state('get_partner_phone')


@dp.message(StateFilter('get_partner_phone'), lambda msg: not msg.contact)
async def get_partner_phone_error(msg: types.Message, state: FSMContext):
    lang = await state.get_data()
    TEXTS = {
        'uz': "‚ÄºÔ∏è Telefon raqamingizni pastki tugmacha orqali yuboring.",
        'ru': "‚ÄºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    }
    await msg.answer(TEXTS[lang['lang']], reply_markup=await create_contact_button(lang['lang']))
    await state.set_state('get_partner_phone')
    return


@dp.message(StateFilter('get_partner_phone'), F.contact)
async def get_partner_phone(msg: types.Message, state: FSMContext):
    lang = await state.get_data()
    await state.update_data(phone=msg.contact.phone_number)
    TEXTS = {
        'uz': "Batafsil ma'lumotingizni kiriting:",
        'ru': "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
    }
    await msg.answer(TEXTS[lang['lang']], reply_markup=ReplyKeyboardRemove())
    await state.set_state('get_partner_advice')


@dp.message(StateFilter('get_partner_advice'))
async def get_partner_advice(msg: types.Message, state: FSMContext):
    lang = await state.get_data()
    user_info = await state.get_data()
    user_fullname = user_info['fullname']
    user_phone = user_info['phone']
    user_advice = msg.text
    await db.add_partner(user_fullname, user_phone, user_advice)
    if lang['lang'] == 'uz':
        user_information = f"üìÑ Hamkorlik uchun ariza!\n\n"
        user_information += f"üë§ Hamkorning Ism-Familiyasi: {user_fullname}\n"
        user_information += f"üì± Hamkorning Telefon raqami: {user_phone}\n"
        user_information += f"üìù Hamkorlik uchun ba'tafsil ma'lumot: {user_advice}"
        for admin in ADMINS:
            await bot.send_message(admin, user_information)
    else:
        user_information = f"üìÑ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ!\n\n"
        user_information += f"üë§ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user_fullname}\n"
        user_information += f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user_phone}\n"
        user_information += f"üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞: {user_advice}"
        for admin in ADMINS:
            await bot.send_message(admin, user_information)
    TEXTS = {
        'uz': "Arizangiz muvaffaqiyatli tarzda qabul qilindi.",
        'ru': "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞."
    }
    await msg.answer(TEXTS[lang['lang']], reply_markup=await create_partners_buttons(lang['lang']))
    await state.clear()
