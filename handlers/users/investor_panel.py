from aiogram import types, F
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from aiogram.types import CallbackQuery, ReplyKeyboardRemove

from keyboards.default import create_invest_button, create_contact_button, create_menu_buttons, create_partners_buttons
from keyboards.inline import create_back_button
from loader import dp, db

buttons_uz = ["üìà Investorlar uchun bo'lim", "üèõ Moliyaviy ma'lumotlar"]
buttons_ru = ["üìà –†–∞–∑–¥–µ–ª –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤", "üèõ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]


@dp.message(lambda c: c.text in ["üìà Investorlar uchun bo'lim", 'üìà –†–∞–∑–¥–µ–ª –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤'])
async def send_invest_info(msg: types.Message, state: FSMContext):
    lang = 'uz' if msg.text == "üìà Investorlar uchun bo'lim" else 'ru'
    TEXTS = {
        'uz': "Pastdagi kerakli tugmachani bo'sing:",
        'ru': "–ù–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    }
    await msg.answer(TEXTS[lang], reply_markup=await create_invest_button(lang))


@dp.message(lambda c: c.text in ["üîô Orqaga", "üîô –ù–∞–∑–∞–¥"])
async def send_invest_info(msg: types.Message, state: FSMContext):
    lang = 'uz' if msg.text == "üîô Orqaga" else 'ru'
    TEXTS = {
        'uz': "Asosiy menyuga qaytdingiz:",
        'ru': "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: "
    }
    await msg.answer(TEXTS[lang], reply_markup=await create_menu_buttons(lang))


@dp.message(lambda msg: msg.text in ["üìÉ Investorlik uchun ariza topshirish", "üìÉ –ó–∞—è–≤–∫–∞ –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"])
async def send_invest_questions(msg: types.Message, state: FSMContext):
    language = 'uz' if msg.text == "üìÉ Investorlik uchun ariza topshirish" else 'ru'
    await state.set_data({'lang': language})
    TEXTS = {
        'uz': "Ism-Familiyangizni kiriting:",
        'ru': "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:"
    }
    await msg.answer(TEXTS[language], reply_markup=ReplyKeyboardRemove())
    await state.set_state('get_fullname')


@dp.message(StateFilter('get_fullname'))
async def get_fullname(msg: types.Message, state: FSMContext):
    language = await state.get_data()
    await state.update_data(fullname=msg.text)
    TEXTS = {
        'uz': "Telefon raqamingizni pastki tugmacha orqali yuboring:",
        'ru': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    }

    await msg.answer(TEXTS[language['lang']], reply_markup=await create_contact_button(language['lang']))

    await state.set_state('get_phone')


@dp.message(StateFilter('get_phone'), lambda msg: not msg.contact)
async def get_phone_error(msg: types.Message, state: FSMContext):
    language = await state.get_data()
    TEXTS = {
        'uz': "‚ÄºÔ∏è Telefon raqamingizni pastki tugmacha orqali yuboring:",
        'ru': "‚ÄºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    }
    await msg.answer(TEXTS[language['lang']], reply_markup=await create_contact_button(language['lang']))
    await state.set_state('get_phone')
    return


@dp.message(StateFilter('get_phone'), F.contact)
async def get_phone(msg: types.Message, state: FSMContext):
    language = await state.get_data()
    await state.update_data(phone=msg.contact.phone_number)
    TEXTS = {
        'uz': "Batafsil ma'lumotingizni kiriting:",
        'ru': "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
    }
    await msg.answer(TEXTS[language['lang']], reply_markup=ReplyKeyboardRemove())
    await state.set_state('get_advice')


@dp.message(StateFilter('get_advice'))
async def get_advice(msg: types.Message, state: FSMContext):
    language = await state.get_data()
    user_info = await state.get_data()
    user_fullname = user_info['fullname']
    user_phone = user_info['phone']
    user_advice = msg.text
    await db.add_invest_user(user_fullname, user_phone, user_advice)
    TEXTS = {
        'uz': 'Sizning arizangiz muvaffaqiyatli tarzda qabul qilindi.',
        'ru': '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞.'
    }
    await msg.answer(TEXTS[language['lang']], reply_markup=await create_partners_buttons(language['lang']))
    await state.clear()

# investor application
# ----------------------------------------------------------------------------------------------------------------------
# investor information for investor application


@dp.message(lambda msg: msg.text in ["üèõ Moliyaviy ma'lumotlar", "üèõ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"])
async def send_invest_info(msg: types.Message, state: FSMContext):
    lang = 'uz' if msg.text == "üèõ Moliyaviy ma'lumotlar" else 'ru'
    invest_info = await db.get_invest_info(lang)
    if invest_info:
        TEXTS = {
            'uz': {
                f"invest_info": f"üèõ Moliyaviy ma'lumotlar: \n\n{invest_info[0]}\n{invest_info[1]}"
                                f"\n{invest_info[2]}\n{invest_info[3]}",
                "invest_image": f"{invest_info[4]}"
            },
            'ru': {
                f"invest_info": f"üèõ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n\n{invest_info[0]}\n{invest_info[1]}"
                                f"\n{invest_info[2]}\n{invest_info[3]}",
                "invest_image": f"{invest_info[4]}"
            }
        }
        await msg.answer_photo(photo=TEXTS[lang]['invest_image'], caption=TEXTS[lang]['invest_info'])
    else:
        TEXTS = {
            'uz': "Moliyaviy ma'lumotlar topilmadi",
            'ru': "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞"
        }
        await msg.answer(TEXTS[lang])
